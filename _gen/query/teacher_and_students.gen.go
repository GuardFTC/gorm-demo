// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-demo/_gen/model"
)

func newTeacherAndStudent(db *gorm.DB, opts ...gen.DOOption) teacherAndStudent {
	_teacherAndStudent := teacherAndStudent{}

	_teacherAndStudent.teacherAndStudentDo.UseDB(db, opts...)
	_teacherAndStudent.teacherAndStudentDo.UseModel(&model.TeacherAndStudent{})

	tableName := _teacherAndStudent.teacherAndStudentDo.TableName()
	_teacherAndStudent.ALL = field.NewAsterisk(tableName)
	_teacherAndStudent.ID = field.NewInt32(tableName, "id")
	_teacherAndStudent.TeacherID = field.NewInt32(tableName, "teacher_id")
	_teacherAndStudent.StudentID = field.NewInt32(tableName, "student_id")

	_teacherAndStudent.fillFieldMap()

	return _teacherAndStudent
}

// teacherAndStudent 老师学生表
type teacherAndStudent struct {
	teacherAndStudentDo

	ALL       field.Asterisk
	ID        field.Int32 // 主键ID
	TeacherID field.Int32 // 教师ID
	StudentID field.Int32 // 学生ID

	fieldMap map[string]field.Expr
}

func (t teacherAndStudent) Table(newTableName string) *teacherAndStudent {
	t.teacherAndStudentDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teacherAndStudent) As(alias string) *teacherAndStudent {
	t.teacherAndStudentDo.DO = *(t.teacherAndStudentDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teacherAndStudent) updateTableName(table string) *teacherAndStudent {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.TeacherID = field.NewInt32(table, "teacher_id")
	t.StudentID = field.NewInt32(table, "student_id")

	t.fillFieldMap()

	return t
}

func (t *teacherAndStudent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teacherAndStudent) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["teacher_id"] = t.TeacherID
	t.fieldMap["student_id"] = t.StudentID
}

func (t teacherAndStudent) clone(db *gorm.DB) teacherAndStudent {
	t.teacherAndStudentDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teacherAndStudent) replaceDB(db *gorm.DB) teacherAndStudent {
	t.teacherAndStudentDo.ReplaceDB(db)
	return t
}

type teacherAndStudentDo struct{ gen.DO }

type ITeacherAndStudentDo interface {
	gen.SubQuery
	Debug() ITeacherAndStudentDo
	WithContext(ctx context.Context) ITeacherAndStudentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeacherAndStudentDo
	WriteDB() ITeacherAndStudentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeacherAndStudentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeacherAndStudentDo
	Not(conds ...gen.Condition) ITeacherAndStudentDo
	Or(conds ...gen.Condition) ITeacherAndStudentDo
	Select(conds ...field.Expr) ITeacherAndStudentDo
	Where(conds ...gen.Condition) ITeacherAndStudentDo
	Order(conds ...field.Expr) ITeacherAndStudentDo
	Distinct(cols ...field.Expr) ITeacherAndStudentDo
	Omit(cols ...field.Expr) ITeacherAndStudentDo
	Join(table schema.Tabler, on ...field.Expr) ITeacherAndStudentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherAndStudentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeacherAndStudentDo
	Group(cols ...field.Expr) ITeacherAndStudentDo
	Having(conds ...gen.Condition) ITeacherAndStudentDo
	Limit(limit int) ITeacherAndStudentDo
	Offset(offset int) ITeacherAndStudentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherAndStudentDo
	Unscoped() ITeacherAndStudentDo
	Create(values ...*model.TeacherAndStudent) error
	CreateInBatches(values []*model.TeacherAndStudent, batchSize int) error
	Save(values ...*model.TeacherAndStudent) error
	First() (*model.TeacherAndStudent, error)
	Take() (*model.TeacherAndStudent, error)
	Last() (*model.TeacherAndStudent, error)
	Find() ([]*model.TeacherAndStudent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherAndStudent, err error)
	FindInBatches(result *[]*model.TeacherAndStudent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeacherAndStudent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeacherAndStudentDo
	Assign(attrs ...field.AssignExpr) ITeacherAndStudentDo
	Joins(fields ...field.RelationField) ITeacherAndStudentDo
	Preload(fields ...field.RelationField) ITeacherAndStudentDo
	FirstOrInit() (*model.TeacherAndStudent, error)
	FirstOrCreate() (*model.TeacherAndStudent, error)
	FindByPage(offset int, limit int) (result []*model.TeacherAndStudent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeacherAndStudentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teacherAndStudentDo) Debug() ITeacherAndStudentDo {
	return t.withDO(t.DO.Debug())
}

func (t teacherAndStudentDo) WithContext(ctx context.Context) ITeacherAndStudentDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teacherAndStudentDo) ReadDB() ITeacherAndStudentDo {
	return t.Clauses(dbresolver.Read)
}

func (t teacherAndStudentDo) WriteDB() ITeacherAndStudentDo {
	return t.Clauses(dbresolver.Write)
}

func (t teacherAndStudentDo) Session(config *gorm.Session) ITeacherAndStudentDo {
	return t.withDO(t.DO.Session(config))
}

func (t teacherAndStudentDo) Clauses(conds ...clause.Expression) ITeacherAndStudentDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teacherAndStudentDo) Returning(value interface{}, columns ...string) ITeacherAndStudentDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teacherAndStudentDo) Not(conds ...gen.Condition) ITeacherAndStudentDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teacherAndStudentDo) Or(conds ...gen.Condition) ITeacherAndStudentDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teacherAndStudentDo) Select(conds ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teacherAndStudentDo) Where(conds ...gen.Condition) ITeacherAndStudentDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teacherAndStudentDo) Order(conds ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teacherAndStudentDo) Distinct(cols ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teacherAndStudentDo) Omit(cols ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teacherAndStudentDo) Join(table schema.Tabler, on ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teacherAndStudentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teacherAndStudentDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teacherAndStudentDo) Group(cols ...field.Expr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teacherAndStudentDo) Having(conds ...gen.Condition) ITeacherAndStudentDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teacherAndStudentDo) Limit(limit int) ITeacherAndStudentDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teacherAndStudentDo) Offset(offset int) ITeacherAndStudentDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teacherAndStudentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeacherAndStudentDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teacherAndStudentDo) Unscoped() ITeacherAndStudentDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teacherAndStudentDo) Create(values ...*model.TeacherAndStudent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teacherAndStudentDo) CreateInBatches(values []*model.TeacherAndStudent, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teacherAndStudentDo) Save(values ...*model.TeacherAndStudent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teacherAndStudentDo) First() (*model.TeacherAndStudent, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherAndStudent), nil
	}
}

func (t teacherAndStudentDo) Take() (*model.TeacherAndStudent, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherAndStudent), nil
	}
}

func (t teacherAndStudentDo) Last() (*model.TeacherAndStudent, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherAndStudent), nil
	}
}

func (t teacherAndStudentDo) Find() ([]*model.TeacherAndStudent, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeacherAndStudent), err
}

func (t teacherAndStudentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeacherAndStudent, err error) {
	buf := make([]*model.TeacherAndStudent, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teacherAndStudentDo) FindInBatches(result *[]*model.TeacherAndStudent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teacherAndStudentDo) Attrs(attrs ...field.AssignExpr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teacherAndStudentDo) Assign(attrs ...field.AssignExpr) ITeacherAndStudentDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teacherAndStudentDo) Joins(fields ...field.RelationField) ITeacherAndStudentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teacherAndStudentDo) Preload(fields ...field.RelationField) ITeacherAndStudentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teacherAndStudentDo) FirstOrInit() (*model.TeacherAndStudent, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherAndStudent), nil
	}
}

func (t teacherAndStudentDo) FirstOrCreate() (*model.TeacherAndStudent, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeacherAndStudent), nil
	}
}

func (t teacherAndStudentDo) FindByPage(offset int, limit int) (result []*model.TeacherAndStudent, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teacherAndStudentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teacherAndStudentDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teacherAndStudentDo) Delete(models ...*model.TeacherAndStudent) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teacherAndStudentDo) withDO(do gen.Dao) *teacherAndStudentDo {
	t.DO = *do.(*gen.DO)
	return t
}
